const express = require('express');
const OpenAI = require('openai');
const { auth } = require('../middleware/auth.middleware');

const router = express.Router();

// MOCK FLAG: Set USE_OPENAI_MOCK=true in .env to use mock responses for demo/testing
const USE_OPENAI_MOCK = process.env.USE_OPENAI_MOCK === 'true';
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// Natural Language to Segment Rules
router.post('/segment-rules', auth, async (req, res) => {
  const { prompt } = req.body;
  if (!prompt) return res.status(400).json({ success: false, message: 'Prompt is required' });

  // MOCK RESPONSE for demo/testing
  if (USE_OPENAI_MOCK) {
    return res.json({
      success: true,
      rules: [
        { field: 'lastActivity', operator: 'less_than', value: '2023-01-01', groupId: 'group-1' },
        { field: 'totalSpend', operator: 'greater_than', value: 5000, groupId: 'group-1' }
      ],
      raw: '[{"field":"lastActivity","operator":"less_than","value":"2023-01-01"},{"field":"totalSpend","operator":"greater_than","value":5000}]',
      mock: true
    });
  }

  try {
    const system = `You are a CRM assistant. Convert user descriptions of audiences into structured JSON segment rules. Use this format: [{ field: string, operator: string, value: string|number }]. Supported fields: name, email, status, lastActivity, createdAt, totalSpend, customField1, customField2. Supported operators: equals, not_equals, contains, not_contains, greater_than, less_than, between. Always include all three fields.`;
    const completion = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        { role: 'system', content: system },
        { role: 'user', content: prompt }
      ],
      temperature: 0.2,
      max_tokens: 256
    });
    const text = completion.choices[0].message.content;
    console.log('OpenAI raw output:', text); // Debug log
    // Try to extract JSON from the response
    const match = text.match(/\[.*\]/s);
    let rules = match ? JSON.parse(match[0]) : [];
    // Filter out rules missing required fields
    rules = rules.filter(r => r.field && r.operator && r.value !== undefined && r.value !== '');
    if (rules.length === 0) {
      return res.status(400).json({ success: false, message: 'No valid rules generated by AI.' });
    }
    res.json({ success: true, rules, raw: text });
  } catch (error) {
    console.error('OpenAI error:', error);
    res.status(500).json({ success: false, message: 'OpenAI error', error: error.message });
  }
});

// AI-Driven Message Suggestions
router.post('/message-suggestions', auth, async (req, res) => {
  const { objective, audience } = req.body;
  if (!objective) return res.status(400).json({ success: false, message: 'Objective is required' });

  // MOCK RESPONSE for demo/testing
  if (USE_OPENAI_MOCK) {
    return res.json({
      success: true,
      suggestions: [
        'We miss you! Here\'s 10% off your next order.',
        'Come back and enjoy exclusive savings!',
        'It\'s been a while! Unlock a special deal just for you.'
      ],
      raw: '["We miss you! Here\\u0027s 10% off your next order.","Come back and enjoy exclusive savings!","It\\u0027s been a while! Unlock a special deal just for you."]',
      mock: true
    });
  }

  try {
    const system = `You are a CRM copywriting assistant. Given a campaign objective and optionally an audience, generate 3 short, engaging message variants for SMS or WhatsApp. Return as a JSON array of strings.`;
    let userPrompt = `Objective: ${objective}`;
    if (audience) userPrompt += `\nAudience: ${audience}`;
    const completion = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        { role: 'system', content: system },
        { role: 'user', content: userPrompt }
      ],
      temperature: 0.7,
      max_tokens: 256
    });
    const text = completion.choices[0].message.content;
    res.json({ success: true, suggestions: (() => {
      const match = text.match(/\[.*\]/s);
      return match ? JSON.parse(match[0]) : [];
    })(), raw: text });
  } catch (error) {
    console.error('OpenAI error:', error);
    res.status(500).json({ success: false, message: 'OpenAI error', error: error.message });
  }
});

// NOTE FOR REVIEWERS: This file uses real OpenAI API integration, but will return mock responses if USE_OPENAI_MOCK=true in .env (for demo/quota reasons).

module.exports = router; 